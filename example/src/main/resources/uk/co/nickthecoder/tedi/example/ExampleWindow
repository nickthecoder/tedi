package uk.co.nickthecoder.tedi.example

import javafx.event.ActionEvent
import javafx.event.EventHandler
import javafx.scene.Scene
import javafx.scene.control.*
import javafx.scene.input.KeyCode
import javafx.scene.input.KeyEvent
import javafx.scene.layout.BorderPane
import javafx.scene.layout.VBox
import javafx.stage.Stage
import uk.co.nickthecoder.tedi.CodeWordBreakIterator
import uk.co.nickthecoder.tedi.TediArea
import uk.co.nickthecoder.tedi.loadGraphic
import uk.co.nickthecoder.tedi.requestFocusOnSceneAvailable
import uk.co.nickthecoder.tedi.ui.*
import java.net.URL

class ExampleWindow(stage: Stage = Stage()) {

    val dummyArea = TediArea("dummy")

    val toolbar = ToolBar()

    val borderPane = BorderPane()

    val tabPane = TabPane()

    val scene = Scene(borderPane, 700.0, 500.0)

    val matcher = TextInputControlMatcher(dummyArea)
    val searchBar = SearchBar(matcher)
    val replaceBar = ReplaceBar(matcher)

    val searchAndReplaceToolBars = VBox()

    val toggleLineNumbers = ToggleButton()
    val toggleSearch = ToggleButton()
    val toggleSearchAndReplace = ToggleButton()

    val goto = GotoDialog.createGotoButton { currentArea }.apply { tooltip = Tooltip("Go to Line (ctrl+G)") }

    var currentArea = dummyArea
        set(v) {
            field.displayLineNumbersProperty().unbindBidirectional(toggleLineNumbers.selectedProperty())

            field = v

            toggleLineNumbers.selectedProperty().bindBidirectional(v.displayLineNumbersProperty())
            matcher.textInputControl = v
        }

    init {
        /**
         * Auto removes and replaces children when they are made invisible.
         * Without this, the VBox would take up space even when its children were hidden.
         */
        RemoveHiddenChildren(searchAndReplaceToolBars.children)

        TediArea.style(scene)

        with(borderPane) {
            styleClass.add("example")
            center = tabPane
            top = toolbar
            bottom = searchAndReplaceToolBars
        }

        with(tabPane) {
            tabs.add(EditorTab(ExampleWindow::class.java.getResource("welcome.txt")))
            tabs.add(EditorTab(ExampleWindow::class.java.getResource("LICENSE")))
            tabs.add(EditorTab(ExampleWindow::class.java.getResource("ExampleWindow.kt")))
            tabs.add(EditorTab(TediArea::class.java.getResource("tedi.css")))
            tabs.add(EditorTab())
        }

        with(toggleLineNumbers) {
            loadGraphic(SearchBar::class.java, "line-numbers.png")
            tooltip = Tooltip("Show/Hide Line Numbers (ctrl+L)")
        }

        with(toggleSearch) {
            loadGraphic(SearchBar::class.java, "search.png")
            tooltip = Tooltip("Find (ctrl+F)")
            selectedProperty().bindBidirectional(searchBar.toolBar.visibleProperty())
        }

        with(toggleSearchAndReplace) {
            loadGraphic(ReplaceBar::class.java, "replace.png")
            tooltip = Tooltip("Find & Replace (ctrl+R)")
            selectedProperty().bindBidirectional(replaceBar.toolBar.visibleProperty())
        }

        with(searchBar) {
            toolBar.styleClass.add("bottom")
        }
        with(replaceBar) {
            toolBar.styleClass.add("bottom")
        }

        with(toolbar.items) {
            add(toggleLineNumbers)
            add(toggleSearch)
            add(toggleSearchAndReplace)
            add(goto)
        }

        with(searchAndReplaceToolBars) {
            children.addAll(searchBar.toolBar, replaceBar.toolBar)
        }

        // Hides the search and replace toolbars.
        matcher.inUse = false

        stage.scene = scene
        with(stage) {
            title = "Tedi Demo Application"
            show()
        }

        borderPane.addEventFilter(KeyEvent.KEY_PRESSED) { onKeyPressed(it) }
    }

    /**
     * A quick and dirty keyboard event handler
     */
    fun onKeyPressed(event: KeyEvent) {
        var consume = true

        if (event.isControlDown) {
            when (event.code) {
                KeyCode.F -> {
                    matcher.inUse = true
                    searchBar.search.requestFocusOnSceneAvailable()
                }
                KeyCode.R -> {
                    val wasInUse = matcher.inUse
                    replaceBar.toolBar.isVisible = true
                    if (wasInUse) {
                        replaceBar.replacement.requestFocusOnSceneAvailable()
                    }
                }
                KeyCode.G -> GotoDialog(currentArea).show()
                else -> consume = false
            }

        } else {
            // Not control down
            when (event.code) {
                KeyCode.ESCAPE -> onEscape()
                else -> consume = false
            }
        }

        if (consume) {
            event.consume()
        }
    }

    fun onEscape() {
        matcher.inUse = false
    }

    fun createButton(text: String, action: () -> Unit): Button {
        val button = Button(text)
        button.onAction = EventHandler<ActionEvent> { action() }
        return button
    }

    inner class EditorTab(title: String = "New Document") : Tab() {

        constructor(url: URL) : this(url.path.replace(Regex(".*/"), "")) {
            tediArea.text = url.readText()
        }

        val tediArea = TediArea()

        init {
            println("Creating a tab")
            content = tediArea
            text = title

            tediArea.wordIterator = CodeWordBreakIterator()

            this.selectedProperty().addListener { _, _, newValue ->
                if (newValue == true) {
                    tediArea.requestFocusOnSceneAvailable()
                }
            }

            tediArea.focusedProperty().addListener { _, _, newValue ->
                if (newValue == true) {
                    currentArea = tediArea
                }
            }
        }

    }
}

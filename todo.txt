Bugs
----

Shift-tab doesn't work without a selection.
maybe also make tab work "correctly" when the start of the selection is half way in the line.
    Temporarily move selection to the start of the line.

Next
----

Consider renaming TediMatcher TextInputMatcher, and then create a subclass TediMatcher if/when highlighting matches
is implemented.

Make GotoDialog work with TextArea
    Add the required methods as kotlin extensions for TextInputControl.

Later
-----

Search and replace.
    Matches should be highlighted in a similar way to a selection (but in a different color).
    Word matches
    Too-many matches > 1000? Abort.

Consider adding back line-wrapping, but set display-line-numbers=false whenever it is set.
    Likewise setting displayLineNumbers forces line-wrap = false.

"Private" API references
------------------------
    My code still references com.sum.xxx classes.

    TediAreaBehaviour uses :
        com.sun.javafx.scene.control.skin.Utils
        import com.sun.javafx.scene.text.HitInfo
    TediAreaSkin uses :
        import com.sun.javafx.scene.control.skin.Utils
        import com.sun.javafx.scene.text.HitInfo
        import com.sun.javafx.scene.text.TextLayout

The list is getting smaller ;-)

Utils and HitInfo are needed for finding the text position a point is within a Text node.
    I can calculate the height using line height (which I think I can extract using standard APIs)
    I can calculate the column by binary chopping a line of text, and asking for its width.

Bugs
----

Current Work
------------

When deleting paragraphs, tell them, so that they can move their ParagraphHighlightRanges (and
    remove themselves from the HighlightRange), and also set their cachedPosition to -1

Implement Skin.destroyParagraphNode

Update ParagraphHighlightRange when editing text.
    Also update the HighlightRange too, so that its positions remain valid?
    This will require ALL further highlights to be affected.
    Big plus... The document can be saved with those highlights.

Make ParagraphNode clever enough to handle a set of styles
    i.e. break the line into pieces, where each piece can have their own style

Use this for search matches
    if match count > 1000 stop adding highlights.

Create a utility class which listens for document changes, and calls a function after a short time,
but abandons it if another change happens before it is complete.
    Extend this with highlighting in mind, where the function returns a set of HighlightRanges,
    and they are applied for you (removing the old ones).

Try to REPLACE an existing highlight.
    I think it will throw at the moment.

Add a kotlin syntax highlighter to the Demo.

Add a css syntax highlighter to the Demo ???
    Maybe style colours, such as #ffeeee and gray, so that their background color is the required color.
         Must then pick black or white for the text.
    Standard JavaFX styles such as -fx-padding coloured differently to unknown styles.

Add another tab to Demo, where you can add your own highlights to a document.

Next
----

Create a SimpleDemo app in a single java file
    No tabs
    Better undo/redo.
    find/replace and go to
    No syntax highlighting.

Consider removing ParagraphList.ContentCharSequence as it isn't efficient.
    At the very least rename it, as it isn't in Content!!!

Check when layoutChildren is being called, and try to minimise this.

Add font +/- buttons in the Demo.

Move the gutter OUTSIDE of the scrollbar, so that it isn't scrolled away horizontally.

get rid of getLine?
change Paragraph.text to charSequence, and add text, which does a toString.
rename "line" methods to paragraph?

is lineHeight() correct? Can the text area adjust the line spacing???

Later
-----

Consider adding a gutter to the right, which shows where the match results are.
    Kate puts it IN the scroll bar, whereas IntelliJ puts it the left of the scroll bar, floating above the text.
    Copy IntelliJ - don't make it a "gutter", float it over the content.

Consider adding back line-wrapping
    Set set display-line-numbers=false whenever it is set.
    Likewise setting displayLineNumbers forces line-wrap = false.

    OR, build the line numbers as a set of Text objects, and line them up with the main Text nodes.

    This would prevent some optimisations later though (allowing only *visible* nodes to be created/updated).

Syntax Highlighting / Search matches
------------------------------------

On Adding : HighlightRanges

Iterate over them, working out which Paragraphs that they intersect, and converting their start/ends into
columnStart and columnEnds for each Paragraph.

Add a ParagraphHighlightRange to each affected Paragraph, and fire a change event.

Skin will hear the change event, and rebuild its Text objects based on the ParagraphHighlightRanges. Like so :

Take all start/ends and shove them in a sorted set, including 0 and the last column.
Now iterate, creating a Text object for each adjacent pair of ints, style the Text for any ParagraphHighlightRanges
that intersect this range.

To delete a HighlightRange, while adding, we kept an internal list of Paragraph on HighlightRange.
Iterate over it calling Paragraph.removeHighlight( HighlightRange ).
We need to find the Paragraph's index. do lineFor( length ) to validate all Paragraph.cachedPosition.
Then do lineFor( Paragraph.cachedPosition )
NOTE. When a paragraph is deleted, we must remove that Paragraph from the HighlightRange OR, set its
cachedPosition to -1, and if we find a -1, then ignore it. Maybe both!


Paragraph insert() and delete() must adjust the ParagraphsHighlightRanges appropriately.
Inserting into the MIDDLE of a range, will extend it. Inserting before will move to following ranges.
Deleting inside a range will shrink it. Deleting before a range will move the following ranges.

Edge case : If a highlight spans multiple lines, consider using -1 and length +1 as its range (so that insertions
always extend the range, even at the start and end of line).
    The skin can just use clamp when adding into the sorted list.

Note, this is inefficient, as a Paragraph will be converted into Text objects multiple times if it has more than
one highlight within it. So instead, while adding/removing styles, keep a list of affected Paragraphs, and only
fire change events at the end.
